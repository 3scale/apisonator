From de9f98b5386a75c8cda6a844c78698d0c11ca2d0 Mon Sep 17 00:00:00 2001
From: Alejandro Martinez Ruiz <alex@flawedcode.org>
Date: Tue, 7 Jul 2015 01:06:30 +0200
Subject: [PATCH 02/16] misc: use JSON gem instead of YAJL in code

---
 lib/3scale/backend/listener.rb                  |  2 +-
 lib/3scale/backend/log_request_storage.rb       | 16 ++++++++++++++--
 lib/3scale/backend/storage_helpers.rb           |  5 +++--
 lib/3scale/backend/transactor/notify_batcher.rb |  2 +-
 4 files changed, 19 insertions(+), 6 deletions(-)

diff --git a/lib/3scale/backend/listener.rb b/lib/3scale/backend/listener.rb
index 0491d6288..0d4bcee4d 100644
--- a/lib/3scale/backend/listener.rb
+++ b/lib/3scale/backend/listener.rb
@@ -705,7 +705,7 @@ module ThreeScale
       def error_response(e)
         content_type 'application/json'
         status 403
-        body Yajl::Encoder.encode({:error => {:code => e.code, :message => e.message}})
+        body({ error: { code: e.code, message: e.message } }.to_json)
         true
       end
 
diff --git a/lib/3scale/backend/log_request_storage.rb b/lib/3scale/backend/log_request_storage.rb
index 48bc037df..e9d39cd6b 100644
--- a/lib/3scale/backend/log_request_storage.rb
+++ b/lib/3scale/backend/log_request_storage.rb
@@ -58,12 +58,24 @@ module ThreeScale
 
       def list_by_service(service_id)
         raw_items = storage.lrange(queue_key_service(service_id), 0, -1)
-        raw_items.map(&method(:decode))
+        raw_items.map do |i|
+          begin
+            decode(i)
+          rescue Encoding::InvalidByteSequenceError
+            decode(i.force_encoding('UTF-8'))
+          end
+        end
       end
 
       def list_by_application(service_id, application_id)
         raw_items = storage.lrange(queue_key_application(service_id, application_id), 0, -1)
-        raw_items.map(&method(:decode))
+        raw_items.map do |i|
+          begin
+            decode(i)
+          rescue Encoding::InvalidByteSequenceError
+            decode(i.force_encoding('UTF-8'))
+          end
+        end
       end
 
       def count_by_service(service_id)
diff --git a/lib/3scale/backend/storage_helpers.rb b/lib/3scale/backend/storage_helpers.rb
index c204f655e..399b06429 100644
--- a/lib/3scale/backend/storage_helpers.rb
+++ b/lib/3scale/backend/storage_helpers.rb
@@ -2,12 +2,13 @@ module ThreeScale
   module Backend
     module StorageHelpers
       private
+
       def encode(stuff)
-        Yajl::Encoder.encode(stuff)
+        stuff.to_json
       end
 
       def decode(encoded_stuff)
-        stuff = Yajl::Parser.parse(encoded_stuff).symbolize_keys
+        stuff = JSON.parse(encoded_stuff).symbolize_keys
         stuff[:timestamp] = Time.parse_to_utc(stuff[:timestamp]) if stuff[:timestamp]
         stuff
       end
diff --git a/lib/3scale/backend/transactor/notify_batcher.rb b/lib/3scale/backend/transactor/notify_batcher.rb
index 9643fb05a..eeacca2a0 100644
--- a/lib/3scale/backend/transactor/notify_batcher.rb
+++ b/lib/3scale/backend/transactor/notify_batcher.rb
@@ -48,7 +48,7 @@ module ThreeScale
           tt = Time.now.getutc
           tt = tt-tt.sec
 
-          encoded = Yajl::Encoder.encode({:provider_key => provider_key, :usage => usage, :time => encode_time(tt)})
+          encoded = { provider_key: provider_key, usage: usage, time: encode_time(tt) }.to_json
           num_elements = storage.rpush(key_for_notifications_batch, encoded)
 
           ## HACK: TO REMOVE, this is so that tests pass right aways, a batch of 1
-- 
2.21.0

