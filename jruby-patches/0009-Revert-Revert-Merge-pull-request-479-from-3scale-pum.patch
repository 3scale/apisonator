From 567409a9bf846c22ff20c87888e55be59fe6fbdd Mon Sep 17 00:00:00 2001
From: Alejandro Martinez Ruiz <alex@flawedcode.org>
Date: Mon, 28 Sep 2015 17:54:14 +0200
Subject: [PATCH 09/16] Revert "Revert "Merge pull request #479 from
 3scale/puma-server""

This reverts commit 18391006d89b2cc55dbb7abc01d7800fb65ca6b6.
---
 3scale_backend.gemspec                  |   2 +-
 Gemfile                                 |  11 +-
 Gemfile.lock                            |   2 +
 config/puma.rb                          | 165 +++++++++++++++++++++
 lib/3scale/backend.rb                   |  14 ++
 lib/3scale/backend/runner.rb            |   1 +
 lib/3scale/backend/server.rb            |   2 +-
 lib/3scale/backend/server/puma.rb       | 183 ++++++++++++++++++++++++
 {config => script/config}/twemproxy.yml |   0
 script/lib/functions                    |   8 +-
 10 files changed, 381 insertions(+), 7 deletions(-)
 create mode 100644 config/puma.rb
 create mode 100644 lib/3scale/backend/server/puma.rb
 rename {config => script/config}/twemproxy.yml (100%)

diff --git a/3scale_backend.gemspec b/3scale_backend.gemspec
index acb721be5..ddc6aa4dc 100644
--- a/3scale_backend.gemspec
+++ b/3scale_backend.gemspec
@@ -35,7 +35,7 @@ Gem::Specification.new do |s|
   s.add_dependency 'influxdb',                  '0.1.8'
   s.add_dependency 'cubert-client',             '0.0.12'
 
-  s.files = Dir.glob('{lib,bin,app}/**/*')
+  s.files = Dir.glob('{lib,bin,app,config}/**/*')
   s.files << 'README.md'
   s.files << 'Rakefile'
   s.files << 'config.ru'
diff --git a/Gemfile b/Gemfile
index 2671c2125..a3f7157bf 100644
--- a/Gemfile
+++ b/Gemfile
@@ -10,11 +10,20 @@ gemspec
 # implementations (ie. pure Ruby, java, etc).
 #
 platform :ruby do
-  gem 'thin', '= 1.6.3'
   gem 'yajl-ruby', '= 1.1.0'
   gem 'pry-byebug', '~> 3.2.0', groups: [:development, :test]
 end
 
+# Default server by platform
+platform :mri do
+  gem 'thin', '= 1.6.3'
+  gem 'puma', '= 2.13.4', groups: [:development, :test]
+end
+
+platform :jruby, :rbx do
+  gem 'puma', '= 2.13.4'
+end
+
 group :test do
   gem 'mocha',       '~> 1.1.0'
   gem 'nokogiri',    '~> 1.6.2'
diff --git a/Gemfile.lock b/Gemfile.lock
index 7bf328612..3bb7448dc 100644
--- a/Gemfile.lock
+++ b/Gemfile.lock
@@ -125,6 +125,7 @@ GEM
     pry-doc (0.8.0)
       pry (~> 0.9)
       yard (~> 0.8)
+    puma (2.13.4)
     rack (1.6.4)
     rack-protection (1.5.3)
       rack
@@ -225,6 +226,7 @@ DEPENDENCIES
   pry (~> 0.10.1)
   pry-byebug (~> 3.2.0)
   pry-doc (~> 0.8.0)
+  puma (= 2.13.4)
   rack-test (~> 0.6.2)
   resque_spec (~> 0.15.0)
   resque_unit (~> 0.4.4)
diff --git a/config/puma.rb b/config/puma.rb
new file mode 100644
index 000000000..19f2bbe65
--- /dev/null
+++ b/config/puma.rb
@@ -0,0 +1,165 @@
+#!/usr/bin/env puma
+
+# The directory to operate out of.
+#
+# The default is the current directory.
+#
+# directory '/u/apps/lolcat'
+
+# Use an object or block as the rack application. This allows the
+# config file to be the application itself.
+#
+# app do |env|
+#   puts env
+#
+#   body = 'Hello, World!'
+#
+#   [200, { 'Content-Type' => 'text/plain', 'Content-Length' => body.length.to_s }, [body]]
+# end
+
+# Load "path" as a rackup file.
+#
+# The default is "config.ru".
+#
+# rackup '/u/apps/lolcat/config.ru'
+
+# Set the environment in which the rack's app will run. The value must be a string.
+#
+# The default is "development".
+#
+# environment 'production'
+
+# Daemonize the server into the background. Highly suggest that
+# this be combined with "pidfile" and "stdout_redirect".
+#
+# The default is "false".
+#
+# daemonize
+# daemonize false
+
+# Store the pid of the server in the file at "path".
+#
+# pidfile '/u/apps/lolcat/tmp/pids/puma.pid'
+
+# Use "path" as the file to store the server info state. This is
+# used by "pumactl" to query and control the server.
+#
+# state_path '/u/apps/lolcat/tmp/pids/puma.state'
+
+# Redirect STDOUT and STDERR to files specified. The 3rd parameter
+# ("append") specifies whether the output is appended, the default is
+# "false".
+#
+# stdout_redirect '/u/apps/lolcat/log/stdout', '/u/apps/lolcat/log/stderr'
+# stdout_redirect '/u/apps/lolcat/log/stdout', '/u/apps/lolcat/log/stderr', true
+
+# Disable request logging.
+#
+# The default is "false".
+#
+# quiet
+
+# Configure "min" to be the minimum number of threads to use to answer
+# requests and "max" the maximum.
+#
+# The default is "0, 16".
+#
+# threads 0, 16
+
+# Bind the server to "url". "tcp://", "unix://" and "ssl://" are the only
+# accepted protocols.
+#
+# The default is "tcp://0.0.0.0:9292".
+#
+# bind 'tcp://0.0.0.0:9292'
+# bind 'unix:///var/run/puma.sock'
+# bind 'unix:///var/run/puma.sock?umask=0111'
+# bind 'ssl://127.0.0.1:9292?key=path_to_key&cert=path_to_cert'
+
+# Instead of "bind 'ssl://127.0.0.1:9292?key=path_to_key&cert=path_to_cert'" you
+# can also use the "ssl_bind" option.
+#
+# ssl_bind '127.0.0.1', '9292', { key: path_to_key, cert: path_to_cert }
+
+# Code to run before doing a restart. This code should
+# close log files, database connections, etc.
+#
+# This can be called multiple times to add code each time.
+#
+# on_restart do
+#   puts 'On restart...'
+# end
+
+# Command to use to restart puma. This should be just how to
+# load puma itself (ie. 'ruby -Ilib bin/puma'), not the arguments
+# to puma, as those are the same as the original process.
+#
+# restart_command '/u/app/lolcat/bin/restart_puma'
+
+# === Cluster mode ===
+
+# How many worker processes to run.
+#
+# The default is "0".
+#
+# workers 2
+
+# Code to run when a worker boots to setup the process before booting
+# the app.
+#
+# This can be called multiple times to add hooks.
+#
+# on_worker_boot do
+#   puts 'On worker boot...'
+# end
+
+# Code to run when a worker boots to setup the process after booting
+# the app.
+#
+# This can be called multiple times to add hooks.
+#
+# after_worker_boot do
+#   puts 'After worker boot...'
+# end
+
+# Code to run when a worker shutdown.
+#
+#
+# on_worker_shutdown do
+#   puts 'On worker shutdown...'
+# end
+
+# Allow workers to reload bundler context when master process is issued
+# a USR1 signal. This allows proper reloading of gems while the master
+# is preserved across a phased-restart. (incompatible with preload_app)
+# (off by default)
+
+# prune_bundler
+
+# Preload the application before starting the workers; this conflicts with
+# phased restart feature. (off by default)
+
+# preload_app!
+
+# Additional text to display in process listing
+#
+# tag 'app name'
+
+# Change the default timeout of workers
+#
+# worker_timeout 60
+
+# === Puma control rack application ===
+
+# Start the puma control rack application on "url". This application can
+# be communicated with to control the main server. Additionally, you can
+# provide an authentication token, so all requests to the control server
+# will need to include that token as a query parameter. This allows for
+# simple authentication.
+#
+# Check out https://github.com/puma/puma/blob/master/lib/puma/app/status.rb
+# to see what the app has available.
+#
+# activate_control_app 'unix:///var/run/pumactl.sock'
+# activate_control_app 'unix:///var/run/pumactl.sock', { auth_token: '12345' }
+# activate_control_app 'unix:///var/run/pumactl.sock', { no_token: true }
diff --git a/lib/3scale/backend.rb b/lib/3scale/backend.rb
index daecd1bde..50fddff40 100644
--- a/lib/3scale/backend.rb
+++ b/lib/3scale/backend.rb
@@ -64,10 +64,24 @@ module ThreeScale
   PIPELINED_SLICE_SIZE = 400
 
   module Backend
+    # Thread safety of our application. Turn this on if we ever are MT safe.
+    def self.thread_safe?
+      false
+    end
+
     def self.root_dir
       File.expand_path(__FILE__ + '/../../..')
     end
 
+    def self.number_of_cpus
+      cpuinfo_file = '/proc/cpuinfo'
+      if File.readable? cpuinfo_file
+        File.open(cpuinfo_file) { |f| f.grep(/processor/).size }
+      else
+        1 # non-Linux users get a default good enough for dev & test
+      end
+    end
+
     def self.environment
       ENV['RACK_ENV'] || 'development'
     end
diff --git a/lib/3scale/backend/runner.rb b/lib/3scale/backend/runner.rb
index a3b20a6c0..d9bf10da7 100644
--- a/lib/3scale/backend/runner.rb
+++ b/lib/3scale/backend/runner.rb
@@ -15,6 +15,7 @@ module ThreeScale
         myopts, serveropts = ARGV.join(' ').split(' -- ')
         command, options = parse!(myopts ? myopts.split : [])
         options[:argv] = serveropts ? serveropts.split : []
+        options[:original_argv] = ARGV.dup
         send command, options
       end
 
diff --git a/lib/3scale/backend/server.rb b/lib/3scale/backend/server.rb
index b8630b310..62af5e78f 100644
--- a/lib/3scale/backend/server.rb
+++ b/lib/3scale/backend/server.rb
@@ -47,7 +47,7 @@ module ThreeScale
         private
 
         def get_server(server_name)
-          server_name ||= :thin
+          server_name ||= RUBY_ENGINE == 'ruby' ? :thin : :puma
           server_name = server_name.to_s.tr('-', '_')
           require "3scale/backend/server/#{server_name}"
           class_name = server_name.split('_').map(&:capitalize).join
diff --git a/lib/3scale/backend/server/puma.rb b/lib/3scale/backend/server/puma.rb
new file mode 100644
index 000000000..bd0f3ec26
--- /dev/null
+++ b/lib/3scale/backend/server/puma.rb
@@ -0,0 +1,183 @@
+# puma.rb - Class handling Puma application server details
+#
+# Note that:
+#
+# This class has its own default ideas about some settings that you can
+# override through command line switches.
+#
+require 'puma/cli'
+
+module ThreeScale
+  module Backend
+    class Server
+      class Puma
+        STATE_PATH = '/tmp/3scale_backend.state'
+        CONTROL_URL = 'unix:///tmp/3scale_backend.sock'
+        CONTROL_AUTH_TOKEN = :none # set to :none, nil for random, or value
+
+        class << self
+          attr_reader :cli
+
+          def new(options)
+            puma_argv = options[:argv] || []
+
+            if options[:Host]
+              puma_argv << ['-b', "tcp://#{options[:Host]}:#{options[:Port] || 3000}"]
+            elsif options[:Port]
+              puma_argv << ['-p', options[:Port]]
+            end
+
+            arg_add puma_argv, '--daemon', '-d', true unless options[:daemonize].nil?
+            arg_add puma_argv, '--pidfile', options[:pid] unless options[:pid].nil?
+            arg_add puma_argv, '--tag', options[:tag] unless options[:tag].nil?
+
+            # rackup file goes last
+            puma_argv << [options[:config]] unless options[:config].nil?
+
+            puma_config_hack! options[:log_file], '2.13.4'
+
+            @cli = ::Puma::CLI.new(puma_argv.flatten)
+
+            # Puma makes a lot of assumptions regarding how it is being run. In
+            # particular, Puma::CLI thinks it is alone in the world. We have
+            # to override them, because otherwise it will try to restart us
+            # dropping the 3scale_backend's runner-specific arguments and using
+            # Puma's own knobs, which will obviously not work.
+            puma_restart_argv = @cli.instance_variable_get('@restart_argv')
+            arg_3scalebe = puma_restart_argv.reverse.find do |arg|
+              arg.end_with? '3scale_backend'
+            end
+            if arg_3scalebe
+              idx_3scalebe = puma_restart_argv.rindex(arg_3scalebe)
+              puma_restart_argv[idx_3scalebe+1..-1] = options[:original_argv] if idx_3scalebe
+            end
+
+            self
+          end
+
+          def start
+            yield self if block_given?
+            @cli.run
+          end
+
+          [:halt, :restart, :phased_restart,
+           :stats, :status, :stop, :reload_worker_directory].each do |cmd|
+            define_method cmd do |options|
+              command = __method__.to_s.tr('_', '-')
+              command = 'phased-restart' if command == 'restart'
+              Process.exec "#{build_pumactl_cmd(options)} #{command}"
+            end
+          end
+
+          private
+
+          # Puma does not allow us to specify some settings from the CLI
+          # interface, so we are forced to override them. The problem is that by
+          # the time the config file is loaded and parsed, it is already too
+          # late for us to change anything.
+          #
+          # So basically we monkey patch some default values that we know we
+          # want IN CASE NO ONE SPECIFIED ANYTHING ELSE (ie. not in parameters,
+          # not in config file), and we also hook in just after having a final
+          # option set so that we can respect the log file parameter.
+          #
+          # For this to be really accurate, we check the version so that a human
+          # has actually looked at their code and made sure this will work.
+          def puma_config_hack!(log_file, version)
+            raise 'Unknown Puma version' unless version == ::Puma::Const::VERSION
+
+            # Serving model settings here
+            #
+            # compute default workers and threads values
+            # We want to adapt workers and threads to our characteristics.
+            # Note that these values will likely need to be tweaked depending on
+            # the Ruby implementation and how our app behaves!
+            ncpus = ThreeScale::Backend.number_of_cpus
+            workers = Process.respond_to?(:fork) ? ncpus + 1 : 0
+            # if no workers but mt-safe, we spawn more threads.
+            min_threads, max_threads = if ThreeScale::Backend.thread_safe?
+                                         shift = workers.zero? ? 2 : 0
+                                         [ncpus << shift, ncpus << 1 + shift]
+                                       else
+                                         [1, 1]
+                                       end
+
+            # overwrite some Puma defaults
+            ::Puma::Configuration.class_eval do
+              alias_method :old_default_options, :default_options
+              define_method :default_options do
+                old_default_options.merge!(
+                  min_threads: min_threads,
+                  max_threads: max_threads,
+                  workers: workers,
+                  # pick up the Backend env
+                  environment: ThreeScale::Backend.environment,
+                  # operate out of the Backend root dir by default
+                  directory: ThreeScale::Backend.root_dir,
+                  worker_directory: ThreeScale::Backend.root_dir,
+                  # default status and control settings
+                  state: STATE_PATH,
+                  control_url: CONTROL_URL,
+                  control_auth_token: CONTROL_AUTH_TOKEN,
+                  # stop Puma from logging each request on its own in dev mode
+                  quiet: true
+                )
+              end
+            end
+
+            ::Puma::CLI.class_eval do
+              alias_method :old_parse_options, :parse_options
+              define_method :parse_options do
+                old_parse_options
+                # config is a method with the config settings in Puma::CLI
+                opts = config.options
+                # don't want this to be overriden with a puma config!
+                if opts[:environment] != ThreeScale::Backend.environment
+                  raise "mismatched environment in Backend vs Puma config file"
+                end
+                if opts[:max_threads].to_i > 1 && !ThreeScale::Backend.thread_safe?
+                  raise "Puma was instructed to use multiple threads, but we are not MT-safe!"
+                end
+                # the log file parameter has precedence over other settings
+                if log_file
+                  opts[:redirect_append] = true
+                  opts[:redirect_stdout] = log_file
+                  opts[:redirect_stderr] = log_file
+                end
+              end
+            end
+          end
+
+          def arg_add(argv, *switches, value)
+            to_add = [switches.first]
+            to_add << value.to_s unless value == true
+            argv << to_add unless switches.any? { |s| argv.include?(s) }
+          end
+
+          def build_pumactl_cmd(options)
+            args = options[:argv] || []
+            arg_add args, '-F', '--config-file', config_file
+            arg_add args, '-P', '--pidfile', options[:pid]
+            arg_add args, '-C', '--control-url', CONTROL_URL
+            arg_add args, '-S', '--state', STATE_PATH
+            # add control token if it is set and not autogenerated
+            if CONTROL_AUTH_TOKEN && CONTROL_AUTH_TOKEN != :none
+              arg_add args, '-T', '--control-token', CONTROL_AUTH_TOKEN
+            end
+            "pumactl #{args.flatten.join(' ')}"
+          end
+
+          def config_file
+            base = ThreeScale::Backend.root_dir + '/config/' + to_s.split(':').last.downcase
+            ['/' + ThreeScale::Backend.environment, ''].each do |entry|
+              file = base + entry + '.rb'
+              return file if File.readable? file
+            end
+            raise 'cannot find configuration file for Puma'
+          end
+        end
+      end
+
+    end
+  end
+end
diff --git a/config/twemproxy.yml b/script/config/twemproxy.yml
similarity index 100%
rename from config/twemproxy.yml
rename to script/config/twemproxy.yml
diff --git a/script/lib/functions b/script/lib/functions
index 6893569f6..d2ab4bb70 100644
--- a/script/lib/functions
+++ b/script/lib/functions
@@ -51,12 +51,12 @@ function start_twemproxy {
     # try to locate the config dir
     local configdir
     local basedir="${SCRIPT_DIR:-$(pwd -P)}"
-    if [ -r ${basedir}/../config/twemproxy.yml ]; then
-        configdir="${basedir}/../config"
-    elif [ -r ${basedir}/config/twemproxy.yml ]; then
+    if [ -r ${basedir}/config/twemproxy.yml ]; then
         configdir="${basedir}/config"
+    elif [ -r ${basedir}/script/config/twemproxy.yml ]; then
+        configdir="${basedir}/script/config"
     else
-        configdir="/vagrant/config"
+        configdir="/vagrant/script/config"
     fi
     /opt/twemproxy/sbin/nutcracker -m 512 -o /tmp/nutcracker-$(date +"%Y%m%d%H%M%S").log -p "${TWEMPROXY_PIDFILE}" -d -c ${configdir}/twemproxy.yml
 }
-- 
2.21.0

