#! /usr/bin/env ruby

require 'optparse'

postfile     = nil
requests     = 1
concurrency  = 1
host         = nil
port         = nil
start_server = false

options = OptionParser.new do |options|
  options.on('-p PATH', 'File containing data to POST') do |value|
    postfile = value
  end

  options.on('-n NUMBER', Integer, 'Number of requests to perform') do |value|
    requests = value
  end
  
  options.on('-c NUMBER', Integer, 'Number of concurrent requests to make') do |value|
    concurrency = value
  end

  options.on('-H HOST[:PORT]',
             'Host and port of the server to run the benchmarks against') do |value|
    host, port = value.split(':')
  end

  options.on('-s', 'Start own server') do
    start_server = true
  end

  options.on_tail('-h', '--help', 'Show this help') do
    puts options
    exit
  end
end

options.parse!

if postfile.nil? || postfile.empty?
  puts options
  abort
end
    
host = '0.0.0.0' if host.nil? || host.empty?
port = 3000      if port.nil? || port.empty?

require 'rubygems'
require 'rack/utils'

$:.unshift(File.expand_path(File.dirname(__FILE__) + '/../lib'))
require '3scale/backend'
require 'configuration'
include ThreeScale::Backend

include Rack::Utils
payload = File.read(postfile)
params = parse_nested_query(payload)

# Create stuff
EM.run do
  Fiber.new do
    storage = ThreeScale::Backend.storage
    storage.flushdb

    # Create master shit
    master_provider_key = ThreeScale::Backend.configuration.master_provider_key
    master_service_id = 1
    Service.save(:provider_key => master_provider_key, :id => master_service_id)

    Metric.save(
      :service_id => master_service_id,
      :id         => 100,
      :name       => 'hits',
      :children   => [Metric.new(:id => 101, :name => 'transactions/create_multiple')])

    Metric.save(
      :service_id => master_service_id,
      :id         => 200,
      :name       => 'transactions')

    # Create service
    provider_key = params['provider_key']
    service_id   = 1001
    Service.save(:provider_key => provider_key, :id => service_id)

    # Create master contract
    Contract.save(:service_id => master_service_id, :user_key => provider_key,
                  :id => 1002, :state => :live)

    # Create metrics
    Metric.save(:service_id => service_id, :id => 8001, :name => 'hits')

    # Create contracts
    user_keys = []   
    params['transactions'].values.each do |transaction|
      user_keys << transaction['user_key']
    end
    user_keys.uniq!

    user_keys.each_with_index do |key, index|
      Contract.save(:service_id => service_id, :user_key => key,
                    :id => index + 2000, :state => :live)
    end

    EM.stop
  end.resume
end

if start_server
  system("thin -d -a #{host} -p #{port} -R 3scale_backend.ru start")
  sleep(1)
end

# Run ab
system("ab -n #{requests} -c #{concurrency} -p #{postfile} -T application/x-www-form-urlencoded http://#{host}:#{port}/transactions.xml")


if start_server
  # Stop server
  system("thin -R 3scale_backend.ru stop")
end

