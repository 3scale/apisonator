REDIS_PORTS=(7379 7380 6379)
TWEMPROXY_PIDFILE="/tmp/twemproxy_backend_tests.pid"
INFLUXDB_PIDFILE="/tmp/influxdb_backend_tests.pid"
CUBERT_PIDFILE="/tmp/cubert_backend_tests.pid"

# helper for daemonizing processes from the shell
function daemonize {
    (nohup "$@" 0<&- &> /dev/null & echo $!) &
}

function kill_pidfile {
    kill_pid `cat "$@"`
}

function kill_pid {
    kill -TERM "${1}" & sleep 2
    kill -9 "${1}" 2> /dev/null
}

function start_influxdb {
    /usr/bin/influxdb -config=/opt/influxdb/shared/config.toml -pidfile="${INFLUXDB_PIDFILE}" &
    sleep 5
}

function start_redis {
    if [ -e /usr/local/bin/redis-server ]; then
	cmd="/usr/local/bin/redis-server"
    elif [ -e /usr/bin/redis-server ]; then
	cmd="/usr/bin/redis-server"
    else
	cmd="/opt/redis/bin/redis-server"
    fi
     for port in "${REDIS_PORTS[@]}"
    do
	$cmd --port "$port" --daemonize yes &
    done
}

function stop_redis {
    local pids
    for port in "${REDIS_PORTS[@]}"; do
	kill_pid `ps aux | grep redis-server | grep "$port" | awk '{ print $2 }'` &
	pids[${port}]=$!
    done
    wait ${pids[*]}
}

function start_twemproxy {
    # try to locate the config dir
    local configdir
    local basedir="${SCRIPT_DIR:-$(pwd -P)}"
    if [ -r ${basedir}/../config/twemproxy.yml ]; then
        configdir="${basedir}/../config"
    elif [ -r ${basedir}/config/twemproxy.yml ]; then
        configdir="${basedir}/config"
    else
        configdir="/vagrant/config"
    fi
    /opt/twemproxy/sbin/nutcracker -m 512 -o /tmp/nutcracker.log -p "${TWEMPROXY_PIDFILE}" -d -c ${configdir}/twemproxy.yml
}

function stop_twemproxy {
    kill_pidfile ${TWEMPROXY_PIDFILE}
}

function stop_influxdb {
    kill_pidfile ${INFLUXDB_PIDFILE}
}

function start_cubert {
    daemonize /usr/bin/env ruby -e "require 'cubert/app'; Rack::Server.start app: Cubert::App.app" > ${CUBERT_PIDFILE}
}

function stop_cubert {
    kill_pidfile ${CUBERT_PIDFILE}
}

function start_services {
    start_redis
    start_twemproxy
    start_influxdb
    start_cubert
}

function stop_services {
    local pids
    for fn in stop_redis stop_twemproxy stop_influxdb stop_cubert; do
	eval "${fn}" &
	pids[${fn}]=$!
    done
    wait ${pids[*]}
}

