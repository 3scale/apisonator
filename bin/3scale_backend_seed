#!/usr/bin/env ruby

require 'optparse'

file = nil
usage_limits = false
user_limits = false

parser = OptionParser.new do |parser|
  parser.on('-p', '--postfile FILE', 'An ab-style postfile. This script will generate all data necessary to use it for benchmarking.') do |value|
    file = value
  end

  parser.on('-l', '--limits', 'Generate also some usage limits') do
    usage_limits = true
  end

  parser.on('-u','--user','Generated a plan with limits by user') do
    user_limits = true
  end

  parser.parse!
end

unless file
  puts parser
  abort
end

require '3scale/backend'
require 'rack/utils'

class Seeder
  include Rack::Utils
  include ThreeScale::Core
  include ThreeScale::Backend

  def seed(source_file, usage_limits, user_limits)
    params = parse_nested_query(File.read(source_file))

    storage = Storage.instance
    storage.flushall

    master_service_id   = seed_master_data
    service_id, plan_id, user_plan_id = seed_provider_data(master_service_id, params, usage_limits, user_limits)
    seed_buyer_data(service_id, plan_id, user_plan_id, params, user_limits)
  end

  private
  
  MASTER_SERVICE_ID = 1

  def seed_master_data
    master_service_id = ThreeScale::Backend.configuration.master_service_id
    Metric.save(
      :service_id => master_service_id,
      :id         => 100,
      :name       => 'hits',
      :children   => [Metric.new(:id => 101, :name => 'transactions/create_multiple'),
                      Metric.new(:id => 102, :name => 'transactions/authorize')])

    Metric.save(
      :service_id => master_service_id,
      :id         => 200,
      :name       => 'transactions')

    master_service_id
  end

  def seed_provider_data(master_service_id, params, usage_limits, user_limits)
    # Create service
    provider_key = params['provider_key']
    service_id   = 1001
    plan_id = 2001
    user_plan_id = 2002
    user_plan_name = "user_plan_name"

    Service.save!(:provider_key => provider_key, :id => service_id, :user_registration_required => false, :default_user_plan_id => user_plan_id, :default_user_plan_name => user_plan_name)

    ##s = Service.load!(provider_key)
    ##u = User.load!(s,"aaaa")

    # Create master cinstance
    Application.save(:service_id => master_service_id, :id => 1002, :state => :live)

    # Create metrics
    Metric.save(:service_id => service_id, :id => 8001, :name => 'hits')

    Metric.save(
      :service_id => service_id,
      :id         => 8001,
      :name       => 'hits',
      :children   => [Metric.new(:id => 80011, :name => 'method1'),
                      Metric.new(:id => 80012, :name => 'method2')])

    Metric.save(:service_id => service_id, :id => 8002, :name => 'other')
    Metric.save(:service_id => service_id, :id => 8003, :name => 'stats_metric')
    Metric.save(:service_id => service_id, :id => 8004, :name => 'user_metric')


    # Create plan
    plan_id = 2001

    if usage_limits
    #if false
      # Create limits
      UsageLimit.save(:service_id => service_id,
                      :plan_id    => plan_id,
                      :metric_id  => 8001,
                      :month      => 1000000,
                      :day        =>  100000,
                      :hour       =>   10000,
                      :minute     =>    1000)
      UsageLimit.save(:service_id => service_id,
                      :plan_id    => plan_id,
                      :metric_id  => 8002,
                      :month      =>  200000,
                      :day        =>   20000,
                      :hour       =>    2000,
                      :minute     =>     200)
    end

    if user_limits
      UsageLimit.save(:service_id => service_id,
                      :plan_id    => user_plan_id,
                      :metric_id  => 8004,
                      :day        => 10000,
                      :hour       => 100,
                      :minute     => 10)
    end

    [service_id, plan_id, user_plan_id]
  end

	

  def seed_buyer_data(service_id, plan_id, user_plan_id, params, user_limits)
    # Create cinstances
    app_ids = []   
    params['transactions'].values.each do |transaction|
      app_ids << transaction['app_id']
    end
    app_ids.uniq!

    app_ids.each_with_index do |app_id, index|
      Application.save(:service_id => service_id,
                    :plan_id    => plan_id,
                    :plan_name  => 'test',
                    :user_required => user_limits,
                    :id         => app_id,
                    :state => :active)
    end
  end
end


Seeder.new.seed(file, usage_limits, user_limits)
