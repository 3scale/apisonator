#!/usr/bin/env ruby

require 'optparse'

file = nil
usage_limits = false

parser = OptionParser.new do |parser|
  parser.on('-p', '--postfile FILE', 'An ab-style postfile. This script will generate all data necessary to use it for benchmarking.') do |value|
    file = value
  end

  parser.on('-l', '--limits', 'Generate also some usage limits') do
    usage_limits = true
  end

  parser.parse!
end

unless file
  puts parser
  abort
end

require '3scale/backend'
require 'rack/utils'

class Seeder
  include Rack::Utils
  include ThreeScale::Core
  include ThreeScale::Backend

  def seed(source_file, usage_limits)
    params = parse_nested_query(File.read(source_file))

    storage = Storage.instance
    storage.flushdb

    master_service_id   = seed_master_data
    service_id, plan_id = seed_provider_data(master_service_id, params, usage_limits)
                          seed_buyer_data(service_id, plan_id, params)
  end

  private
  
  MASTER_SERVICE_ID = 1

  def seed_master_data
    master_service_id = ThreeScale::Backend.configuration.master_service_id
    Metric.save(
      :service_id => master_service_id,
      :id         => 100,
      :name       => 'hits',
      :children   => [Metric.new(:id => 101, :name => 'transactions/create_multiple'),
                      Metric.new(:id => 102, :name => 'transactions/authorize')])

    Metric.save(
      :service_id => master_service_id,
      :id         => 200,
      :name       => 'transactions')

    master_service_id
  end

  def seed_provider_data(master_service_id, params, usage_limits)
    # Create service
    provider_key = params['provider_key']
    service_id   = 1001
    Service.save(:provider_key => provider_key, :id => service_id)

    # Create master contract
    Contract.save(:service_id => master_service_id, :user_key => provider_key,
              :id => 1002, :state => :live)

    # Create metrics
    Metric.save(:service_id => service_id, :id => 8001, :name => 'hits')

    # Create plan
    plan_id = 2001

    if usage_limits
      # Create limits
      UsageLimit.save(:service_id => service_id,
                      :plan_id    => plan_id,
                      :metric_id  => 8001,
                      :month      => 1000000,
                      :week       =>  500000,
                      :day        =>  100000,
                      :hour       =>   10000,
                      :minute     =>    1000)
    end

    [service_id, plan_id]
  end

  def seed_buyer_data(service_id, plan_id, params)
    # Create contracts
    user_keys = []   
    params['transactions'].values.each do |transaction|
      user_keys << transaction['user_key']
    end
    user_keys.uniq!

    user_keys.each_with_index do |key, index|
      Contract.save(:service_id => service_id,
                    :user_key   => key,
                    :plan_id    => plan_id,
                    :plan_name  => 'test',
                    :id         => index + 3000,
                    :state => :live)
    end
  end
end


Seeder.new.seed(file, usage_limits)
